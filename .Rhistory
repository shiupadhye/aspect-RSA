q3 = quantile(as.double(unlist(df[,col])),0.75)
IQR = q3 - q1
dfNew = subset(df,get(col) >  q1 - 1.5 * IQR  & get(col) < q3 + 1.5 * IQR)
}
exp2.data <- read_csv("fluentTrials_exp2.csv")
head(exp2.data)
exp2.typeRates <- read_csv("exp2_pID_wpm.csv")
head(exp2.typeRates)
hist(exp2.data$onset_latency)
# remove extreme values
exp2.typeRates <- exp2.typeRates %>%
filter(pID_wpm != Inf)
dim(exp2.typeRates)
hist(exp2.typeRates$pID_wpm)
exp2.typeRates_IQR <- remove_outliers_IQR(exp2.typeRates,'pID_wpm')
#exp2.typeRates_SD <- remove_outliers_SD(exp2.typeRates,'pID_wpm')
hist(exp2.typeRates_IQR$pID_wpm)
dim(exp2.typeRates_IQR)
meanSD <- get_meanSD(exp2.typeRates_IQR$pID_wpm)
get_meanSD(exp2.typeRates_IQR$pID_wpm)
write_csv(exp2.typeRates_IQR,"exp2.typeRates_IQR.csv")
exp2.keepSubjs <- exp2.typeRates_IQR$pID
dim(exp2.data)
exp2.data <- exp2.data %>%
filter(pID %in% exp2.keepSubjs)
dim(exp2.data)
hist(exp2.data$onset_latency)
exp2.data <- remove_outliers_IQR(exp2.data,"onset_latency")
hist(exp2.data$onset_latency)
exp2.data <- exp2.data %>%
mutate(labelSOA = case_when(
SOA == 0 ~  "baseline",
SOA == -150 ~ "negSOA",
SOA == +150 ~ "posSOA"
))
exp2.basic <- exp2.data %>%
filter(condition %in% c("ID","NEU"))
exp2.incongr <- exp2.data %>%
filter(condition %in% c("NEU","REL","UNREL")) %>%
mutate(incongruence = case_when(
condition == "NEU" ~ FALSE,
condition %in% c("REL","UNREL") ~ TRUE
))
exp2.semRel <- exp2.data %>%
filter(condition %in% c("REL","UNREL")) %>%
mutate(relatedness = case_when(
condition == "UNREL" ~ FALSE,
condition == "REL" ~ TRUE
))
exp2.basic_negSOA <- exp2.basic %>%
filter(SOA == -150)
exp2.basic_posSOA <- exp2.basic %>%
filter(SOA == +150)
m.exp2_basic_negSOA <- lmer(onset_latency ~ condition + (1|target) + (condition|pID),
data = exp2.basic_negSOA)
summary(m.exp2_basic_negSOA)
m.exp2_basic_posSOA <- lmer(onset_latency ~ condition + (1|target) + (condition|pID),
data = exp2.basic_posSOA)
summary(m.exp2_basic_posSOA)
exp2.incongr_negSOA <- exp2.incongr %>%
filter(SOA == -150)
exp2.incongr_posSOA <- exp2.incongr %>%
filter(SOA == +150)
m.exp2_incongr_negSOA <- lmer(onset_latency ~ incongruence + (1|target) + (incongruence|pID) + (1|distractor),
data = exp2.incongr_negSOA)
summary(m.exp2_incongr_negSOA)
m.exp2_incongr_posSOA <- lmer(onset_latency ~ incongruence + (1|target) + (incongruence|pID) + (1|distractor),
data = exp2.incongr_posSOA)
summary(m.exp2_incongr_posSOA)
m.exp2_incongr <- lmer(onset_latency ~ incongruence * labelSOA + (1|target) + (incongruence|pID) + (1|distractor),
data = exp2.incongr)
summary(m.exp2_incongr)
summary(m.exp2_semRel_negSOA)
exp2.semRel_negSOA <- exp2.semRel %>%
filter(SOA == -150)
exp2.semRel_posSOA <- exp2.semRel %>%
filter(SOA == +150)
m.exp2_semRel_negSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|subj) + (1|distractor),
data = exp2.semRel_negSOA)
summary(m.exp2_semRel_negSOA)
m.exp2_semRel_negSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|pID) + (1|distractor),
data = exp2.semRel_negSOA)
summary(m.exp2_semRel_negSOA)
m.exp2_semRel_negSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|as.factor(subj)) + (1|distractor),
data = exp2.semRel_negSOA)
exp2.semRel$subj = factor(subj)
exp2.data <- exp2.data %>%
mutate(labelSOA = case_when(
SOA == 0 ~  "baseline",
SOA == -150 ~ "negSOA",
SOA == +150 ~ "posSOA"
))
exp2.basic <- exp2.data %>%
filter(condition %in% c("ID","NEU"))
exp2.incongr <- exp2.data %>%
filter(condition %in% c("NEU","REL","UNREL")) %>%
mutate(incongruence = case_when(
condition == "NEU" ~ FALSE,
condition %in% c("REL","UNREL") ~ TRUE
))
exp2.semRel <- exp2.data %>%
filter(condition %in% c("REL","UNREL")) %>%
mutate(relatedness = case_when(
condition == "UNREL" ~ FALSE,
condition == "REL" ~ TRUE
))
exp2.semRel$subj = factor(subj)
View(exp2.semRel)
exp2.semRel$subj = factor(exp2.seRel$subj)
exp2.semRel$subj = factor(exp2.semRel$subj)
exp2.semRel_negSOA <- exp2.semRel %>%
filter(SOA == -150)
exp2.semRel_posSOA <- exp2.semRel %>%
filter(SOA == +150)
m.exp2_semRel_negSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|as.factor(subj)) + (1|distractor),
data = exp2.semRel_negSOA)
data = exp2.semRel_negSOA)
m.exp2_semRel_negSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|subj) + (1|distractor),
data = exp2.semRel_negSOA)
summary(m.exp2_semRel_negSOA)
pc_m1 <- powerCurve(m.exp2_semRel_negSOA,fixed("relatedness","kr"),along="subj",breaks=c(10,20,30,40,50))
pc_m2 <- powerCurve(m.exp2_semRel_negSOA,fixed("relatedness","kr"),along="subj",breaks=c(10,20,30,40,50))
pc_m2
pc_m2 <- powerCurve(m.exp2_semRel_negSOA,fixed("relatedness","kr"),along="subj",breaks=c(50,60,70))
pc_m2
m.exp2_semRel_posSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|subj) + (1|distractor),
data = exp2.semRel_posSOA)
exp2.semRel <- exp2.semRel %>%
mutate(SOA = case_when(
SOA == 0 ~ "0",
SOA == -150 ~ "-150",
SOA == +150 ~ "+150"
))
exp2.semRel$condition <- factor(exp2.semRel$condition, levels=c("UNREL","REL"))
exp2.semRel$SOA <- factor(exp2.semRel$SOA, levels=c("-150","0","+150"))
m.exp2_semRel <- lmer(onset_latency ~ condition * SOA + (1|target) + (condition * SOA |pID) + (1|distractor),
data = exp2.semRel)
m.exp2_semRel <- lmer(onset_latency ~ condition * SOA + (1|target) + (condition * SOA |subj) + (1|distractor),
data = exp2.semRel)
summary(m.exp2_semRel)
m.exp2_semRel_posSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|subj) + (1|distractor),
data = exp2.semRel_posSOA)
summary(m.exp2_semRel_posSOA)
pc_m3 <- powerCurve(m.exp2_semRel_posSOA,fixed("relatedness","kr"),along="subj",breaks=c(10,20,30,40,50))
pc_m3
library(tidyverse)
library(lme4)
library(simr)
library(effects)
library(lmerTest)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(simr)
library(effects)
library(lmerTest)
# functions for outlier treatment
get_meanSD <- function(vals){
mean = mean(vals)
sd = sd(vals)
return(c(mean,sd))
}
remove_outliers_SD <- function(df,col) {
mean = mean(as.double(unlist(df[,col])))
sd = sd(as.double(unlist(df[,col])))
dfNew = subset(df,get(col) >  mean - 2 * sd & get(col) < mean + 2 * sd)
return(dfNew)
}
remove_outliers_IQR <- function(df,col){
q1 = quantile(as.double(unlist(df[,col])),0.25)
q3 = quantile(as.double(unlist(df[,col])),0.75)
IQR = q3 - q1
dfNew = subset(df,get(col) >  q1 - 1.5 * IQR  & get(col) < q3 + 1.5 * IQR)
}
exp2.data <- read_csv("fluentTrials_exp2.csv")
head(exp2.data)
exp2.typeRates <- read_csv("exp2_pID_wpm.csv")
head(exp2.typeRates)
hist(exp2.data$onset_latency)
# remove extreme values
exp2.typeRates <- exp2.typeRates %>%
filter(pID_wpm != Inf)
dim(exp2.typeRates)
hist(exp2.typeRates$pID_wpm)
exp2.typeRates_IQR <- remove_outliers_IQR(exp2.typeRates,'pID_wpm')
#exp2.typeRates_SD <- remove_outliers_SD(exp2.typeRates,'pID_wpm')
hist(exp2.typeRates_IQR$pID_wpm)
dim(exp2.typeRates_IQR)
meanSD <- get_meanSD(exp2.typeRates_IQR$pID_wpm)
get_meanSD(exp2.typeRates_IQR$pID_wpm)
write_csv(exp2.typeRates_IQR,"exp2.typeRates_IQR.csv")
exp2.keepSubjs <- exp2.typeRates_IQR$pID
dim(exp2.data)
exp2.data <- exp2.data %>%
filter(pID %in% exp2.keepSubjs)
dim(exp2.data)
hist(exp2.data$onset_latency)
exp2.data <- remove_outliers_IQR(exp2.data,"onset_latency")
hist(exp2.data$onset_latency)
exp2.data <- exp2.data %>%
mutate(labelSOA = case_when(
SOA == 0 ~  "baseline",
SOA == -150 ~ "negSOA",
SOA == +150 ~ "posSOA"
))
exp2.basic <- exp2.data %>%
filter(condition %in% c("ID","NEU"))
exp2.incongr <- exp2.data %>%
filter(condition %in% c("NEU","REL","UNREL")) %>%
mutate(incongruence = case_when(
condition == "NEU" ~ FALSE,
condition %in% c("REL","UNREL") ~ TRUE
))
exp2.semRel <- exp2.data %>%
filter(condition %in% c("REL","UNREL")) %>%
mutate(relatedness = case_when(
condition == "UNREL" ~ FALSE,
condition == "REL" ~ TRUE
))
exp2.semRel$subj = factor(exp2.semRel$subj)
exp2.semRel_negSOA <- exp2.semRel %>%
filter(SOA == -150)
exp2.semRel_posSOA <- exp2.semRel %>%
filter(SOA == +150)
m.exp2_semRel_negSOA <- lmer(onset_latency ~ relatedness + (1|target) + (relatedness|subj) + (1|distractor),
data = exp2.semRel_negSOA)
summary(m.exp2_semRel_negSOA)
pc_m2 <- powerCurve(m.exp2_semRel_negSOA,fixed("relatedness","kr"),along="subj",breaks=c(90))
setwd("~/Desktop/aspect-RSA")
exp.data <- read_csv("aspect_main2.csv")
head(exp.data)
setwd("~/Desktop/aspect-RSA")
library(tidyverse)
library(lme4)
library(lmtest)
exp.data <- read_csv("aspect_main2.csv")
head(exp.data)
summary <- exp.data %>%
select(workerid,verb,object,timeframe,response)
label_times <- read_csv("label_times.csv")
summary <- merge(summary,label_times[,c("timeframe","timeframeSecs")],on="timeframe")
summary
priorMeasures <- read_csv("priorMeasures.csv")
stat_data <- merge(summary,priorMeasures,on=c("object"))
stat_data
summary
verb.features <- read_csv("verb_features.csv")
exp.data <- read_csv("aspect_main2.csv")
head(exp.data)
verb.features <- read_csv("verb_features.csv")
summary <- exp.data %>%
select(workerid,verb,object,timeframe,response)
summary <- merge(summary,verb.features,on="verb")
label_times <- read_csv("label_times.csv")
summary <- merge(summary,label_times[,c("timeframe","timeframeSecs")],on="timeframe")
summary
priorMeasures <- read_csv("priorMeasures.csv")
stat_data <- merge(summary,priorMeasures,on=c("object"))
stat_data
m_mean <- lmer(response ~ timeframeSecs + mean_counts +  (1| workerid) +
(1 | verb), data=stat_data)
summary(m_mean)
summary(m_mean)
m_mean <- lmer(response ~ timeframeSecs + verb_manner + mean_counts + (1| workerid), data=stat_data)
summary(m_mean)
summary(m_mean)
summary(m_mean)
m_mean <- lmer(response ~ timeframeSecs + verb_goal + mean_counts + (1| workerid), data=stat_data)
summary(m_mean)
stat_data
m_mean <- lmer(response ~ timeframeSecs + verb_semelfactive + mean_counts + (1| workerid), data=stat_data)
summary(m_mean)
#### model predictions
model_preds <- read_csv("model_predictions.csv")
head(model_preds)
#------
ObjectMeans <- summary %>%
select(object,response) %>%
group_by(object) %>%
summarise(objMeanResponse = mean(response))
objectLevelDat <- merge(ObjectMeans, priorMeasures,on="object")
ggplot(objectLevelDat,aes(x=objMeanResponse,y=entropy_probs)) +
geom_point() +
theme_classic()
#### model predictions
model_preds <- read_csv("model_predictions.csv")
head(model_preds)
ObjectRespSummary <- summary %>%
select(object,timeframe,response) %>%
group_by(object,timeframe) %>%
summarise(mean_response = mean(response))
ObjectRespSummary
ggplot(humanModel_preds,aes(x=reorder(object,mean_counts,mean),y=mean_response,color=object,shape=timeframe)) +
geom_point() +
facet_wrap(~verb_manner) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response') +
ggtitle("Human judgement")
#### model predictions
model_preds <- read_csv("model_predictions.csv")
head(model_preds)
ObjectRespSummary <- summary %>%
select(object,timeframe,response) %>%
group_by(object,timeframe) %>%
summarise(mean_response = mean(response))
ObjectRespSummary
humanModel_preds <- merge(model_preds,ObjectRespSummary,on=c("object","timeframe"))
humanModel_preds$diff_humanModel = humanModel_preds$prHabitual - humanModel_preds$mean_response
humanModel_preds <- merge(humanModel_preds,stat_data[,c("object","timeframe","mean_counts","entropy_probs")],on=c("object","timeframe"))
ggplot(humanModel_preds,aes(x=reorder(object,mean_counts,mean),y=mean_response,color=object,shape=timeframe)) +
geom_point() +
facet_wrap(~verb_manner) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response') +
ggtitle("Human judgement")
ObjectRespSummary
verbRespSummary <- summary %>%
select(object,verb_manner,timeframe,response) %>%
group_by(object,timeframe) %>%
summarise(mean_response = mean(response))
ggplot(humanModel_preds,aes(x=reorder(object,mean_counts,mean),y=mean_response,color=object,shape=timeframe)) +
geom_point() +
facet_wrap(~verb_manner) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response') +
ggtitle("Human judgement")
verbRespSummary
verbRespSummary <- summary %>%
select(object,verb_manner,timeframe,response) %>%
group_by(object,timeframe,verb_manner) %>%
summarise(mean_response = mean(response))
verbRespSummary
ggplot(humanModel_preds,aes(x=reorder(object,mean_counts,mean),y=mean_response,color=object,shape=timeframe)) +
geom_point() +
facet_wrap(~verb_manner) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response') +
ggtitle("Human judgement")
verbRespSummary
ggplot(verbRespSummary,aes(x=reorder(object,mean_response),y=mean_response,color=object,shape=timeframe)) +
geom_point() +
facet_wrap(~verb_manner) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response') +
ggtitle("Human judgement")
ggplot(verbRespSummary,aes(x=object,y=mean_response,color=object,shape=timeframe)) +
geom_point() +
facet_wrap(~verb_manner) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,color=object,shape=timeframe)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,color=object,shape=timeframe)) +
geom_violin() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,color=verb_manner)) +
geom_violin() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,fill=verb_manner)) +
geom_violin() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,fill=verb_manner)) +
stat_summary(fun.data = "mean_cl_boot") +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,fill=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
#### model predictions
model_preds <- read_csv("model_predictions.csv")
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(verbRespSummary,aes(x=verb_manner,y=mean_response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(summary,aes(x=verb_manner,y=mean_response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
summary
ggplot(summary,aes(x=verb_manner,y=response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(summary,aes(x=verb_manner,y=response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
stat_data
ggplot(summary,aes(x=verb_manner,y=response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab('Mean response')
ggplot(summary,aes(x=verb_manner,y=response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot")
ggplot(stat_data,aes(x=verb_manner,y=response,color=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic()
ggplot(stat_data,aes(verb_manner,response)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic()
stat_data
ggplot(stat_data,aes(verb_manner,response)) +
geom_boxplot(notch=TRUE) +
#stat_summary(fun.data = "mean_cl_boot") +
theme_classic()
ggplot(stat_data,aes(verb_manner,response)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
theme_classic()
ggplot(stat_data,aes(x=verb_manner,y=response,fill=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean_cl_boot") +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_manner,y=response,fill=verb_manner)) +
geom_point() +
stat_summary(fun.data = "mean") +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_manner,y=response,fill=verb_manner)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_goal,y=response,fill=verb_manner)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_goal,y=response,fill=verb_goal)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_semelfactive,y=response,fill=verb_semelfactive)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_manner,y=response,fill=verb_manner)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_goal,y=response,fill=verb_goal)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot(notch=TRUE) +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_manner,y=response,fill=verb_manner)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_goal,y=response,fill=verb_goal)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
ggplot(stat_data,aes(x=verb_semelfactive,y=response,fill=verb_semelfactive)) +
#geom_point() +
#stat_summary(fun.data = "mean") +
geom_boxplot() +
facet_wrap(~timeframe) +
theme_classic()
